Transform: AWS::Serverless-2016-10-31

Description: |
  This template uses the AWS Serverless Application Model (AWS SAM) to deploy
  the FastAPI App as a Lambda function behind an API Gateway. The Lambda function
  is built from a Docker image stored in Amazon ECR.

  The template also hooks up a Route 53 DNS record to the API Gateway custom domain,
  and a CloudFront distribution to the API Gateway.

  This is slower than the ecs.yaml template, but it's more cost-effective for 
  low-traffic.

Parameters:
  ImageUri:
    Type: String
    Description: ECR Image URI
    NoEcho: true

  AnalyticsImageUri:
    Type: String
    Description: ECR Image URI for the analytics function
    NoEcho: true

  Environment:
    Type: String
    Description: Environment
    Default: prod

  DomainName:
    Type: String
    Description: The base domain name for the API
    Default: jedwal.co

  GoogleClientId:
    Description: The Google Client ID
    Type: String
    NoEcho: true

  GoogleClientSecret:
    Description: The Google Client Secret
    Type: String
    NoEcho: true

  OAuthSecretToken:
    Description: The OAuth Secret Token
    Type: String
    NoEcho: true

  SentryDSN:
    Description: The Sentry DSN
    Type: String
    NoEcho: true

Resources:
  # API Function
  LambdaApi:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageUri: !Ref ImageUri
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          GOOGLE_CLIENT_ID: !Ref GoogleClientId
          GOOGLE_CLIENT_SECRET: !Ref GoogleClientSecret
          OAUTH_SECRET_TOKEN: !Ref OAuthSecretToken
          ENVIRONMENT: !Ref Environment
          SHEETS_API_TABLE: !Ref DynamoDBTable
          ANALYTICS_TABLE: !Ref AnalyticsDynamoDBTable
          SENTRY_DSN: !Ref SentryDSN

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Sub "${Environment}"
      DefinitionBody:
        swagger: "2.0"
        info:
          title: !Ref AWS::StackName
        paths:
          /:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaApi.Arn}/invocations"
              responses: {}
          /{proxy+}:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaApi.Arn}/invocations"
              responses: {}

  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaApi
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"

  # DNS and Custom Domain Hosting
  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "api.${DomainName}"
      ValidationMethod: DNS

  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub "api.${DomainName}"
      RegionalCertificateArn: !Ref ApiCertificate
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref ApiGateway
      Stage: !Sub "${Environment}"
    DependsOn:
      - ApiGatewayStage # See https://github.com/aws/serverless-application-model/issues/192#issuecomment-406834837

  ApiDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${DomainName}."
      Name: !Sub "api.${DomainName}."
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront Hosted Zone ID

  # DynamoDB Table
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: prod-sheetsapi-table
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: sheet_id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
      # Add secondary indexes sheet_id-index and email-index
      GlobalSecondaryIndexes:
        - IndexName: sheet_id-index
          KeySchema:
            - AttributeName: sheet_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: email-index
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  LambdaStreamFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageUri: !Ref AnalyticsImageUri
      Role: !GetAtt LambdaStreamFunctionExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          ANALYTICS_TABLE: !Ref AnalyticsDynamoDBTable
          SENTRY_DSN: !Ref SentryDSN

  LambdaStreamFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3InvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::cloudfront-logs-${AWS::Region}-sheetsapi-${Environment}"
                  - !Sub "arn:aws:s3:::cloudfront-logs-${AWS::Region}-sheetsapi-${Environment}/*"
        - PolicyName: LambdaDynamoDBWritePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt AnalyticsDynamoDBTable.Arn

      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaStreamFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::cloudfront-logs-${AWS::Region}-sheetsapi-${Environment}"

  CloudFrontLogsBucket:
    Type: AWS::S3::Bucket
    DependsOn: LambdaInvokePermission
    Properties:
      BucketName: !Sub "cloudfront-logs-${AWS::Region}-sheetsapi-${Environment}"
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteLogs
            Status: Enabled
            ExpirationInDays: 7
      AccessControl: LogDeliveryWrite
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt LambdaStreamFunction.Arn

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: ApiGatewayOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: true
            Headers:
              - Origin
              - Access-Control-Request-Headers
              - Access-Control-Request-Method
            Cookies:
              Forward: none
          DefaultTTL: 0
          MaxTTL: 0
          MinTTL: 0
        Origins:
          - Id: ApiGatewayOrigin
            DomainName: !Sub "${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: !Sub "/${Environment}"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
            OriginCustomHeaders:
              - HeaderName: "X-Forwarded-Host"
                HeaderValue: !Sub "api.${DomainName}"
        CacheBehaviors:
          - PathPattern: "/api/*"
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: true
              Headers:
                - Origin
                - Access-Control-Request-Headers
                - Access-Control-Request-Method
              Cookies:
                Forward: none # User session cookies are messing up the cache
            DefaultTTL: 15
            MaxTTL: 86400
            MinTTL: 1
          - PathPattern: "*"
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: true
              Headers:
                - Origin
                - Access-Control-Request-Headers
                - Access-Control-Request-Method
              Cookies:
                Forward: all
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
        ViewerCertificate:
          AcmCertificateArn: !Ref ApiCertificate
          SslSupportMethod: sni-only
        Aliases:
          - !Sub "api.${DomainName}"
        Logging:
          Bucket: !GetAtt CloudFrontLogsBucket.RegionalDomainName
          Prefix: !Sub "${Environment}/"
          IncludeCookies: false

  AnalyticsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: prod-sheetsapi-analytics-table
      AttributeDefinitions:
        - AttributeName: path
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: path
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
      GlobalSecondaryIndexes:
        - IndexName: timestamp-index
          KeySchema:
            - AttributeName: timestamp
              KeyType: HASH
          Projection:
            ProjectionType: ALL

Outputs:
  ApiDomainName:
    Description: "API Domain Name"
    Value: !Ref ApiDomainName
